/* Program */
program ::= port action_list agent_list behavior_list task_list main

port ::= "Port" ":" integer

/* Action */
action_list ::= action+

action ::= "Action" variable "(" formal_parameters? ")" action_compound

action_compound ::= "{" action_statement* "}"

/* TODO: action_statement ::= action_RPC_call_assignment_statement
                    | action_return_statement
                    | action_if_else  */
action_statement ::= action_RPC_call_statement
                    | put_statement
                    | get_statement
                    | assignment_statement
                    | empty_statement

action_RPC_call_statement ::= ":=" function_call_statement

/* Agent */
agent_list ::= agent+

agent ::= "Agent" variable "{" ( variable ( "," variable )* )? ";" "}"

agent_call_statement ::= "Agent" variable integer ";"

/* Behavior */
behavior_list ::= behavior+

behavior ::= "Behavior" variable "(" formal_parameters? ")" "{" behavior_init_block behavior_goal_block behavior_routine_block "}"

behavior_init_block ::= "@init" behavior_compound

behavior_goal_block ::= "@goal" "{" ( behavior_statement* "$" expression )? "}"

behavior_routine_block ::= "@routine" behavior_compound ( "||" behavior_compound )*

behavior_compound ::= "{" behavior_statement* "}"

/* TODO: behavior_statement ::= 
                        | behavior_publish_statement
                        | behavior_subscribe
                        | behavior_unsubscribe_statement
                        | behavior_assignment_statement
                        | behavior_if_else */
behavior_statement ::= function_call_statement
                    | put_statement
                    | get_statement
                    | assignment_statement
                    | empty_statement

function_call_statement ::= variable "(" actual_parameters? ")" ";"

/* Task */
task_list ::= task+

task ::= "Task" variable "(" formal_parameters_agent_range_list ( "," formal_parameters )? ")" "{" task_init_block task_goal_block task_routine_block "}"

task_init_block ::= "@init" task_compound

task_goal_block ::= "@goal" "{" ( task_statement* "$" expression )? "}"

task_routine_block ::= "@routine" task_compound ( "||" task_compound )*

task_compound ::= "{" task_statement* "}"

/* TODO: task_statement ::= task_if_else */
task_statement ::= put_statement
                | get_statement
                | task_call_statement
                | function_call_statement
                | task_order
                | task_each
                | assignment_statement
                | empty_statement

task_order ::= "order" actual_parameters_agent_range "{" function_call_statement* "}"

task_each ::= "each" actual_parameters_agent_range "{" function_call_statement* "}"

task_call_statement ::= variable "(" actual_parameters_agent_range_list ( "," actual_parameters )? ")" ";"

/* TODO: main ::= "Main" "{" agent_call_statement+ task_call_statement* "}" */
main ::= "Main" "{" agent_call_statement+ task_call_statement "}"

put_statement ::= "put" expression "to" stigmergy ";"

get_statement ::= "get" variable "from" stigmergy ";"

/* TODO:assignment_statement ::= variable "=" ( string | expression ) ";" */
assignment_statement ::= variable "=" additive_expression ";"

empty_statement ::= ";"

stigmergy ::= "#" variable "#"

/* TODO:topic_p2p ::= "<" variable ">"
        topic_multicast ::= "<<" variable ">>" */
formal_parameters_agent_range_list ::= "{" formal_parameters_agent_range ( "," formal_parameters_agent_range )* "}"

actual_parameters_agent_range_list ::= "{" actual_parameters_agent_range ( "," actual_parameters_agent_range )* "}"

formal_parameters_agent_range ::= variable "[" variable "~" variable "]"

actual_parameters_agent_range ::= variable "[" additive_expression "~" additive_expression "]"

formal_parameters ::= variable ( "," variable )*

actual_parameters ::= additive_expression ( "," additive_expression )*

/* Expressions */
expression ::= logical_not_expression

logical_not_expression ::= "not"? logical_or_expression

logical_or_expression ::= logical_and_expression
                        | logical_and_expression "or" logical_or_expression

logical_and_expression ::= equality_expression
                        | equality_expression "and" logical_and_expression

equality_expression ::= relational_expression
                    | relational_expression "==" equality_expression
                    | relational_expression "!=" equality_expression

relational_expression ::= additive_expression
                        | additive_expression "<" relational_expression
                        | additive_expression "<=" relational_expression
                        | additive_expression ">" relational_expression
                        | additive_expression ">=" relational_expression

additive_expression ::= multiplicative_expression ( ( "+" | "-" ) multiplicative_expression )*

multiplicative_expression ::= primary_expression ( ( "*" | "/" | "%" ) primary_expression )*

primary_expression ::= integer
                        | ( "+" | "-" ) primary_expression
                        | "(" additive_expression ")"
                        | variable

/* TODO:range_expression ::= ( integer | variable) "~" ( integer | variable)
                    | ( integer | variable) "~" ( integer | variable) "~" ( integer | variable)
                    | ( integer | variable) ( "," ( integer | variable) )* 
        string ::= '"' ( #x0009 | #x000A | #x000D | [#x0020-#xFFFF] )*  '"'
        comments ::= "/*" ( #x0009 | #x000A | #x000D | [#x0020-#xFFFF] )* "*\/"
*/
variable ::= [a-zA-Z] ( [a-zA-Z0-9] | "_" )*

integer ::= "0" | ( [1-9] [0-9]* )