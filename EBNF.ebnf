/* Program */
program ::= port action_list agent_list behavior_list task_defination+ main

port ::= "Port" ":" integer

/* Action */
action_list ::= action+

action ::= "Action" variable "(" formal_parameters? ")" action_compound_statement

action_compound_statement ::= "{" action_statement ( action_statement )* "}"

action_statement ::= action_RPC_call_statement
                    | assignment_statement
                    | empty 

action_RPC_call_statement ::= ":=" function_call ";"

/* TODO: 
action_RPC_call_assignment_statement 
action_RPC_call_statement 
action_return_statement 
action_if_else 
*/

/* Agent */
agent_list ::= agent+

agent ::= "Agent" variable "{" ( variable ( "," variable )* )? ";" "}"

agent_call ::= "Agent" variable integer ";"

/* Behavior */
behavior_list ::= behavior+

behavior ::= "Behavior" variable "(" formal_parameters? ")" "{" behavior_init_block behavior_goal_block behavior_routine_block "}"

behavior_init_block ::= "@init" behavior_compound_statement

behavior_goal_block ::= "@goal" "{" behavior_statement* "$" expression "}"

behavior_routine_block ::= "@routine" behavior_compound_statement ( "||" behavior_compound_statement )*

behavior_compound_statement ::= "{" behavior_statement* "}"

/* TODO: behavior_statement ::= put_statement
                        | get_statement
                        | behavior_publish_statement
                        | behavior_subscribe_statement
                        | behavior_unsubscribe_statement
                        | behavior_assignment_statement
                        | behavior_if_else
                        | behavior_call
                        | action_call
                        | empty */
behavior_statement ::= function_call
                    | assignment_statement
                    | empty

function_call ::= variable "(" actual_parameters? ")"

/* Task */
task_list ::= task+

/* TODO: task ::= "Task" variable "(" formal_parameters_agent_list formal_parameters? ")" "{" task_init_block task_goal_block task_routine_block "}" */

task ::= "Task" variable "(" formal_parameters? ")" "{" task_init_block task_goal_block task_routine_block "}"

task_init_block ::= "@init" task_compound_statement

task_goal_block ::= "@goal" "{" task_statement* "$" expression "}"

/* TODO: task_routine_block ::= "@routine" ( task_routine_parallel | task_routine_order | task_routine_each ) */
task_routine_block ::= "@routine" task_compound_statement ( "||" task_compound_statement )*

task_compound_statement ::= "{" task_statement* "}"

/* TODO: task_statement ::= put_statement
                | get_statement
                | assignment_statement
                | task_if_else
                | task_call
                | behavior_call
                | empty */
task_statement ::= task_call
                | function_call         /* behavior only */
                | assignment_statement
                | empty

task_defination ::= "Task" variable "(" formal_parameters? ")" ":" compound_statement

task_call ::= variable "(" actual_parameters? ")"

/* parameter */
formal_parameters ::= variable ( "," variable )*

/* TODO: agent_call* task_call+ */
main ::= "Main" "{" agent_call task_call "}"

compound_statement ::= statement_list

statement_list ::= statement ( ";" statement )*

statement ::= assignment_statement
            | task_call
            | empty

assignment_statement ::= variable "=" additive_expression

empty ::= 

actual_parameters ::= ( integer | variable ) ( "," ( integer | variable ) )*

/* Expressions */
expression ::= logical_not_expression

logical_not_expression ::= "not"? logical_or_expression

logical_or_expression ::= logical_and_expression
                        | logical_and_expression "or" logical_or_expression

logical_and_expression ::= equality_expression
                        | equality_expression "and" logical_and_expression

equality_expression ::= relational_expression
                    | relational_expression "==" equality_expression
                    | relational_expression "!=" equality_expression

relational_expression ::= additive_expression
                        | additive_expression "<" relational_expression
                        | additive_expression "<=" relational_expression
                        | additive_expression ">" relational_expression
                        | additive_expression ">=" relational_expression

additive_expression ::= multiplicative_expression ( ( "+" | "-" ) multiplicative_expression )*

multiplicative_expression ::= primary_expression ( ( "*" | "/" | "%" ) primary_expression )*

primary_expression ::= integer
                        | ( "+" | "-" ) primary_expression
                        | "(" additive_expression ")"
                        | variable

variable ::= [a-zA-Z] ( [a-zA-Z0-9] | "_" )*

integer ::= "0" | ( [1-9] [0-9]* )