/* Program */
program ::= port action_list agent_list behavior_defination+ task_defination+ main_task

port ::= "Port" ":" integer

/* Action */
action_list ::= action+

action ::= "Action" variable "(" formal_parameters? ")" action_compound_statement

action_compound_statement ::= "{" action_statement ( action_statement )* "}"

action_statement ::= assignment_statement
                    | empty 

/* TODO: 
action_RPC_call_assignment_statement 
action_RPC_call_statement 
action_return_statement 
action_if_else 
action_call
*/

/* Agent */
agent_list ::= agent+

agent ::= "Agent" variable "{" ( variable ( "," variable )* )? ";" "}"

/* TODO: agent_call ::= "Agent" variable integer ";" */

/* Behavior */
behavior_defination ::= "Behavior" variable "(" formal_parameters? ")" ":" compound_statement

/* Task */
task_defination ::= "Task" variable "(" formal_parameters? ")" ":" compound_statement

task_call_statement ::= variable "(" ( additive_expression ( "," additive_expression)* )? ")"

/* parameter */
formal_parameters ::= variable ( "," variable )*

/* TODO: Agent decalaration */
main_task ::= "Main" ":" compound_statement

compound_statement ::= statement_list

statement_list ::= statement ( ";" statement )*

statement ::= assignment_statement
            | task_call_statement
            | empty

assignment_statement ::= variable "=" additive_expression

empty ::= 

/* expr: term ((PLUS | MINUS) term)**/
additive_expression ::= multiplicative_expression ( ( "+" | "-" ) multiplicative_expression )*

/* term: factor ((MUL | DIV) factor)* */
multiplicative_expression ::= primary_expression ( ( "*" | "/" | "%" ) primary_expression )*

/* factor :INTEGER 
           | PLUS factor
           | MINUS factor
           | LPAREN expr RPAREN
           | variable */
primary_expression ::= integer
                        | ( "+" | "-" ) primary_expression
                        | "(" additive_expression ")"
                        | variable

variable ::= [a-zA-Z] ( [a-zA-Z0-9] | "_" )*

integer ::= "0" | ( [1-9] [0-9]* )