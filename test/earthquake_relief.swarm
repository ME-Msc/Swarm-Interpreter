platform Airsim
import Map
import Algorithm
import Uav
import Network

Action takeOff_Action(){
	Uav.takeOff_API();
}
Action flyToHeight_Action(h){
	Uav.flyToHeight_API(h);
}
Action flyTo_Action(dest){
	Uav.flyTo_API(dest);
}
Action getPosition_Action(){
	pos = Uav.getPosition_API();
	return pos;
}
Action takePicture_Action(){
	pic = Uav.takePicture_API();
	return pic;
}
Action cover_Action(net){
	Uav.cover_API();
}
Action putCargoDest_Action(dest){
	get cnt from findCount;
	put dest to cargoDest[];
	put cnt+1 to findCount;
}
Action getCargoDest_Action(){
	get dest from cargoDest[];
	return dest;
}
Action putFindCount_Action(c){
	put c to findCount;
}
Action getFindCount_Action(){
	get cnt from findCount;
	return cnt;
}
Action dropGoods_Action(){
	Uav.dropGoods_API();
	get cnt from cargoCount;
	put cnt+1 to cargoCount;
}
Action goHome_Action(){
	Uav.goHome_API();
}

Agent search_drone {
	takeOff_Action, flyToHeight_Action, flyTo_Action, getPosition_Action, takePicture_Action, cover_Action, putCargoDest_Action, putFindCount_Action, getFindCount_Action, goHome_Action;
}
Agent cargo_drone {
	takeOff_Action, flyToHeight_Action, flyTo_Action, getPosition_Action, getCargoDest_Action, dropGoods_Action, goHome_Action;
}

Behavior search_Behavior(h, net){
	@init{
		takeOff_Action();
		flyToHeight_Action(h);
		find_target = False;
		putFindCount_Action(0);
	}
	@goal{
		found_cnt = getFindCount_Action();
		$ found_cnt >= 2
	}
	@routine{
		cover_Action(net);
	}
	||
	{
		picture = takePicture_Action();
		find_target = Network.cnnRecognize(picture);
		if(find_target == True){
			destination = getPosition_Action();
			putCargoDest_Action(destination);
		}
	}
}

Behavior cargo_Behavior(h) {
	@init{
		takeOff_Action();
		flyToHeight_Action(h);
    }
	@goal{}
	@routine{
		destination = getCargoDest_Action();
		flyTo_Action(destination);
		dropGoods_Action();
		goHome_Action();
	}
}

Task search_delivery({agtA[stA~edA], agtB[stB~edB]}, city_map){
	@init{
		search_height = 40;
		cargo_height = 50;
		put 0 to findCount;
		put 0 to cargoCount;
	}
	@goal{
		get cnt from cargoCount;
		$ cnt >= 3
	}
	@routine{
		each agtA[stA~edA] {
			search_Behavior(search_height, Network.DQN_cover);
		}
	}
	||
	{
		order agtB[stB~edB] {
			cargo_Behavior(cargo_height);
		}
	}
}

Main {
	Agent search_drone 3;
	Agent delivery_drone 3;
	search_delivery({search_drone[0~3], cargo_drone[0~3]}, Map.AirsimNH);
}