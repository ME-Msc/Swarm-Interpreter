platform Airsim
import Map
import Algorithm
import Uav
import Network

Action takeOff_Action(){
	Uav.takeOff_API();
}

Action flyToHeight_Action(h){
	Uav.flyToHeight_API(h);
}

Action flyTo_Action(dest){
	Uav.flyTo_API(dest);
}

Action getPosition_Action(){
	pos = Uav.getPosition_API();
	return pos;
}

Action takePicture_Action(){
	pic = Uav.takePicture_API();
	return pic;
}

Action cover_Action(net){
	Uav.cover_API(net);
}

Action pickUp_Action(){
	Uav.pickUp_API();
}

Action putCargoDest_Action(dest){
	get cnt from findCount;
	put dest to cargoDest[];
	put cnt+1 to findCount;
}

Action getCargoDest_Action(){
	get dest from cargoDest[];
	return dest;
}

Action putFindCount_Action(c){
	put c to findCount;
}

Action getFindCount_Action(){
	get cnt from findCount;
	return cnt;
}

Action dropGoods_Action(){
	Uav.dropGoods_API();
	get cnt from cargoCount;
	put cnt+1 to cargoCount;
}

Action goHome_Action(){
	Uav.goHome_API();
}

Agent search_drone {
	takeOff_Action, flyToHeight_Action, flyTo_Action, getPosition_Action, takePicture_Action, cover_Action, putCargoDest_Action, putFindCount_Action, getFindCount_Action, goHome_Action;
}

Agent cargo_drone {
	takeOff_Action, flyToHeight_Action, flyTo_Action, getPosition_Action,
	pickUp_Action, getCargoDest_Action, dropGoods_Action, goHome_Action;
}

Behavior search_Behavior(h, net){
	@init{
		takeOff_Action();
		flyToHeight_Action(h);
		find_target = False;
		putFindCount_Action(0);
	 }
	@goal{
		found_cnt = getFindCount_Action();
		$ found_cnt >= 5
	}
	@routine{
		/* 单机覆盖算法的完整调用 */
		cover_Action(net);
	}
	||
	{
		picture = takePicture_Action();
		find_target = Network.cnnRecognize(picture);
		if(find_target == True){
			destination = getPosition_Action();
			putCargoDest_Action(destination);
		}
	}
}

Behavior pickUp_delivery_Behavior() {
	@init{
		takeOff_Action();
		pickUp_Action();
	}
	@goal{}
	@routine{
		destination = getCargoDest_Action();
		flyTo_Action(destination);
	}
}

Behavior drop_goHome_Behavior() {
	@init{}
	@goal{}
	@routine{
		dropGoods_Action();
		goHome_Action();
	}
}

Task earthquake_relief({agtA[stA~edA], agtB[stB~edB]}, city_map){
	@init{
		search_height = 30;
		deliver_height = 50;
		put 0 to findCount;
		put 0 to cargoCount;
	}
	@goal{
		get cnt from cargoCount;
		$ cnt >= 3
	}
	@routine{
		each agtA[stA~edA] {
			search_Behavior(search_height, Network.DQN_cover);
		}
	}
	||
	{
		order agtB[stB~edB] {
			pickUp_delivery_Behavior();
			drop_goHome_Behavior();
		}
	}
}

Main {
	Agent search_drone 1;
	Agent cargo_drone 2;
	earthquake_relief({search_drone[0~1], cargo_drone[0~2]}, Map.testMap);
}