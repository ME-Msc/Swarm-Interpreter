import Map
import Algorithm
import Network

/* test comments*/
Action takeOff_Action(){
	:= takeOff_API();
}

Action flyToHeight_Action(h){
	:= flyToHeight_API(h);
}

Action flyTo_Action(dest){
    := flyTo_API(dest);
}

Action getPosition(){
	pos := getPosition_API();
	return pos;
}

Action getDestination(trace, pos){
	dest := getDestination_API(trace, pos);
	return dest;
}

Action flyCircle_Action(network, radius){
	:= flyCircle_API(network, radius);
}

Agent search_uav { 
	takeOff_Action, flyToHeight_Action, flyTo_Action, getPosition, getDestination, flyCircle_Action;
}

Behavior takeOff_Behavior(h) {
	@init{}
	@goal{}
	@routine{
		takeOff_Action();
		flyToHeight_Action(h);
	}
}

Behavior cover_Behavior(traces){
	@init{
        step = 0;
    }
	@goal{
        $ step > 5
    }
	@routine{
        /* FIXME: position = UavWrapper.getPosition(); */
        /* FIXME: destination = UavWrapper.getDestination(trace_for_cover, position); */
        position = getPosition();
        destination = getDestination(traces, position);
        flyTo_Action(destination);
        step = step + 1;
	}
}

Behavior flyCircle_Behavior(net, r){
	@init{
        circle_count = 0;
	}
	@goal{
		$ circle_count == 1
	}
	@routine{
		flyCircle_Action(net, r);
		circle_count = circle_count + 1;
	}
}

Task search({agtC[stC~edC]}, city_map){
	@init{
		/* @init 用于配置所有 sub-task, behavior 所需的必要组件 */
		height = 50;
		traces_for_cover = Algorithm.coverTspSolver(city_map);
		/* FIXME: Algorithm.coverTspSolver需要无人机起始位置， 当前默认map中的第一个点 */
		radius = 2;
	}
	@goal{}
	@routine{
		each agtC[stC~edC] {
            takeOff_Behavior(height);
			cover_Behavior(traces_for_cover);
			flyCircle_Behavior(Network.TD3_fly_circle, radius);
		}
	}
}

Main {
	Agent search_uav 3;
	search({search_uav[0~3]}, Map.AirsimNH);
}